// time complexity O(nk) where n is the number of strings and k is the maximum length of a string
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
         
        vector<unordered_map<char,int>> mapVector;
        vector<vector<string>> res;

        for (const string& str : strs) {
        unordered_map<char, int> charCount;
        for (char c : str) {
            charCount[c]++;
        }
        // Check if the character count map already exists in mapVector
        int index = -1;
        for (int i = 0; i < mapVector.size(); ++i) {
            if (mapVector[i] == charCount) {
                index = i;
                break;
            }
        }
        // If the character count map doesn't exist, add it to mapVector and res
        if (index == -1) {
            index = mapVector.size();
            mapVector.push_back(charCount);
            res.push_back({str});
        } else {
            // If the character count map exists, add the string to the corresponding group in res
            res[index].push_back(str);
        }
    }

    return res;

}
};

// Another Solution time complexity O(nklogk) where n is the number of strings and k is the maximum length of a string
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> m;
        for (const string& str : strs) {
            string key = getKey(str);
            m[key].push_back(str);
        }
        
        vector<vector<string>> result;
        for (const auto& pair : m) {
            result.push_back(pair.second);
        }
        return result;
    }
private:
    string getKey(const string& str) {
        vector<int> count(26, 0);
        for (char c : str) {
            count[c - 'a']++;
        }
        
        string key;
        for (int c : count) {
            key += to_string(c) + '#';
        }
        return key;
    }
};
