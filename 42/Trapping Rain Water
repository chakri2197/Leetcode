/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

*/


class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size(); // Get the size of the height vector

        // Initialize vectors to store the maximum height to the left and right of each position
        vector<int> leftmax(n, 0);
        vector<int> rightmax(n, 0);
        // Initialize a vector to store the minimum of leftmax and rightmax for each position
        vector<int> minLM(n, 0);

        int maxi = 0;
        // Compute the maximum height to the left of each position
        for (int i = 1; i <= n - 1; i++) {
            leftmax[i] = max(height[i - 1], maxi);
            maxi = leftmax[i]; // Update maxi to the current leftmax
        }

        maxi = 0;
        // Compute the maximum height to the right of each position
        for (int j = n - 2; j >= 0; j--) {
            rightmax[j] = max(height[j + 1], maxi);
            maxi = rightmax[j]; // Update maxi to the current rightmax
        }

        // Compute the minimum of leftmax and rightmax for each position
        for (int i = 0; i < n - 1; i++) {
            int m = min(leftmax[i], rightmax[i]);
            // Calculate the water trapped at each position
            if (m - height[i] > 0)
                minLM[i] = m - height[i];
        }

        int sum = 0;
        // Sum up all the water trapped at each position
        for (int x : minLM) {
            sum += x;
        }

        // Return the total amount of trapped water
        return sum;
    }
};
